vue 的不懂的地方
过渡动画，keep-alive

vue
vue.extend()构建组件
v-自定义方法   在vue内设置directive
computed       计算机属性,在html中{{映射出来}}，主要有缓存，后期会被getters替代
watch          监视,

属性
event.target   当前dom，看看跟ref有什么不同
:disabled="flag"   当前的input是否被激活，flag是data里的属性
keep-alive: 被包裹在keep-alive中的组件的状态将会被保留，例如我们将某个列表类组件内容滑动到第100条位置，那么我们在切换到一个组件后再次切换回到该组件，该组件的位置状态依旧会保持在第100条列表处



子组件获取父组件data, props  在父组件中子组件的标签里:子组件变量=“父组件变量”,然后在子组件里用props，接受子组件变量，然后在标签里{{子组件变量}}，也可以限制类型，type:String,还可以设置默认参数
子组件获取父组件事件, $emit  在父组件中子组件的标签里@子组件事件=“父组件事件”,然后在子组件methods里用$emit("子组件事件",参数)
ref的用法    先在html里ref="id" 然后在vue里用$refs.id,能获取这个dom，如果是refs是获取全部带ref属性的dom
vue.set(target, key, value)  target:要更改的data参数，key:再次定位data参数里的索引，value改变后的参数
                             比如items: [{mag:"zs",id:1},{mag:"ls",id:2},{mag:"ww",id:3}],然后在methods方法里用vue.set(this.items,0,{mag:"zs",id:'10'}) ==>  items: [{mag:"zs",id:10},{mag:"ls",id:2},{mag:"ww",id:3}]

插槽 slot,如果父组件里有参数，那就会导入到slot标签里     https://www.jianshu.com/p/cb6209b10070
     v-slot,首先在子组件里设定name="名字"但标签是slot,然后父组件里<template v-slot:名字>参数</template>，只能导入一次,最后一次有效
	 子组件里绑定data参数，然后在父组件里<template #参数名="slotProps">slotprops是接受的数值接受的是数组,在父组件里{{slotProps}}释放
	 v-slot有缩写#
     slot作用域,在子组件里slot 带属性,然后父组件里接收<template slot-scope="接收的参数名">接收的数据为数组，其实跟上面的一样



router
静态路由路径:
             <router-link to="/user/1">xx<router-link>,router中path可以是静态paht:'/user/1'也可以是动态paht:'/user/:id'
动态路由路径:	
             <router-link :to="{name:'动态参数',params:{id:动态参数}}">xxx<router-link>意思就是比如你要搜索一个东西，然后name就是设定是这个东西,然后在route内索引,然后跳转到这个路径	 


动态router的props的用法:
                    1.props: true /*意思是绑定data,比如在path中设置好props:true; 当跳转url时子组件中props接受传输过来的参数，然后放到html中{{参数}}
					2.但是只是传值,不获取url上的参数,可以用props:{uname:'li',age:12}，子组件要用props接收
                    3.props: route => ({ uname: 'zs', age: 20, id: route.params.id }), 可以获取url上的id,子组件要用props接收
					
后退事件:
           this.$router.go(-1)	
路由跳转事件:
           this.$router.push('/userinfo/' + id)	   如果要带参数params: { userId: 123 }
beforeRouteUpdate(to,from,next)

vuex
引用:import store文件，然后跟router一样放入vue内
state     是存放静态属性， {{this.$states.count}} 可以访问count属性，但是最好不要这样做
getters   跟计算机属性一样，具有监听的功能，在store中getStateCount: function(state){return state.count+1}   然后在子组件中映射{{this.$store.getters.getStateCount}}
mutations 方法  mutations里的方法add(state){state.count++;}， 然后在引入到组件方法里this.$store.commit("add"), 然后放入html里
actions   vue不建议直接在子组件中用this.$store.commit("add"),而是在actions中用，addFun(context){context.commit("add")},然后在放入子组件中addFun(){this.$store.dispatch("add")}
          具体流程: 首先在state中设置参数，然后在mutations中设置方法，然后在actions再次包装方法，然后在放入子组件的方法里在再次包装

mapstate,mapgetter  先在子组件导入import { mapState } from 'vuex'
                    computed: {
                               ...mapState(['inputValue', 'viewKey']),        接收State里的参数
                               ...mapGetters(['unDoneLength', 'infolist'])},  接收Getters里的参数
  
		  
vuex 模块化。。。。

关于scss的语法
scoped是样式仅限于局部
导入: @import './xxx';
引用: @include sc(0.55rem, #666)    @mixin sc($size, $color){font-size: $size;color: $color;}  也可以设置默认参数              
      border-top: 1px solid $bc;    $bc: #fff;
	  
	  
属性
中间空格justify-content:space-between;
align-items: center;
fill: #999;
首行缩进text-indent:0.45rem;